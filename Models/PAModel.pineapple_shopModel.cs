//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 15.02.2020 13:36:28
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Pomelo.EntityFrameworkCore;

namespace pineapple_shopModel
{

    public partial class pineapple_shopModel : DbContext
    {

        public pineapple_shopModel() :
            base()
        {
            OnCreated();
        }

        public pineapple_shopModel(DbContextOptions<pineapple_shopModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySql(@"persistsecurityinfo=True;server=localhost;user id=qDshun;password=Kappa2012;database=pineapple_shop");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<DeliveryInfo> DeliveryInfos
        {
            get;
            set;
        }

        public virtual DbSet<ItemsInDelivery> ItemsInDeliveries
        {
            get;
            set;
        }

        public virtual DbSet<PineappleMenu> PineappleMenus
        {
            get;
            set;
        }

        public virtual DbSet<PositionsDictionary> PositionsDictionaries
        {
            get;
            set;
        }

        public virtual DbSet<Staff> Staffs
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<UsersStatusesDictionary> UsersStatusesDictionaries
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.DeliveryInfoMapping(modelBuilder);
            this.CustomizeDeliveryInfoMapping(modelBuilder);

            this.ItemsInDeliveryMapping(modelBuilder);
            this.CustomizeItemsInDeliveryMapping(modelBuilder);

            this.PineappleMenuMapping(modelBuilder);
            this.CustomizePineappleMenuMapping(modelBuilder);

            this.PositionsDictionaryMapping(modelBuilder);
            this.CustomizePositionsDictionaryMapping(modelBuilder);

            this.StaffMapping(modelBuilder);
            this.CustomizeStaffMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.UsersStatusesDictionaryMapping(modelBuilder);
            this.CustomizeUsersStatusesDictionaryMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region DeliveryInfo Mapping

        private void DeliveryInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DeliveryInfo>().ToTable(@"delivery_info", @"pineapple_shop");
            modelBuilder.Entity<DeliveryInfo>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DeliveryInfo>().Property<string>(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<DeliveryInfo>().Property<string>(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<DeliveryInfo>().Property<string>(x => x.TelNumber).HasColumnName(@"tel_number").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<DeliveryInfo>().Property<System.DateTime?>(x => x.Date).HasColumnName(@"date").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<DeliveryInfo>().Property<sbyte>(x => x.DeliveryStatus).HasColumnName(@"delivery_status").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DeliveryInfo>().Property<int?>(x => x.StaffId).HasColumnName(@"staff_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<DeliveryInfo>().Property<int?>(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<DeliveryInfo>().HasKey(@"Id");
        }

        partial void CustomizeDeliveryInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region ItemsInDelivery Mapping

        private void ItemsInDeliveryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ItemsInDelivery>().ToTable(@"items_in_delivery", @"pineapple_shop");
            modelBuilder.Entity<ItemsInDelivery>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemsInDelivery>().Property<int>(x => x.DeliveryId).HasColumnName(@"delivery_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemsInDelivery>().Property<int>(x => x.PineappleId).HasColumnName(@"pineapple_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemsInDelivery>().Property<int>(x => x.Count).HasColumnName(@"count").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ItemsInDelivery>().HasKey(@"Id");
        }

        partial void CustomizeItemsInDeliveryMapping(ModelBuilder modelBuilder);

        #endregion

        #region PineappleMenu Mapping

        private void PineappleMenuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PineappleMenu>().ToTable(@"pineapple_menu", @"pineapple_shop");
            modelBuilder.Entity<PineappleMenu>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PineappleMenu>().Property<string>(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<PineappleMenu>().Property<string>(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar(1000)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<PineappleMenu>().Property<int>(x => x.Weight).HasColumnName(@"weight").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PineappleMenu>().Property<int>(x => x.Price).HasColumnName(@"price").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PineappleMenu>().HasKey(@"Id");
        }

        partial void CustomizePineappleMenuMapping(ModelBuilder modelBuilder);

        #endregion

        #region PositionsDictionary Mapping

        private void PositionsDictionaryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PositionsDictionary>().ToTable(@"positions_dictionary", @"pineapple_shop");
            modelBuilder.Entity<PositionsDictionary>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PositionsDictionary>().Property<string>(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<PositionsDictionary>().Property<int>(x => x.Salary).HasColumnName(@"salary").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PositionsDictionary>().HasKey(@"Id");
        }

        partial void CustomizePositionsDictionaryMapping(ModelBuilder modelBuilder);

        #endregion

        #region Staff Mapping

        private void StaffMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Staff>().ToTable(@"staff", @"pineapple_shop");
            modelBuilder.Entity<Staff>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Staff>().Property<string>(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Staff>().Property<string>(x => x.Passport).HasColumnName(@"passport").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<Staff>().Property<System.DateTime>(x => x.DateOfBirth).HasColumnName(@"date_of_birth").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Staff>().Property<System.DateTime>(x => x.EmploymentDate).HasColumnName(@"employment_date").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Staff>().Property<int>(x => x.PositionId).HasColumnName(@"position_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Staff>().HasKey(@"Id");
        }

        partial void CustomizeStaffMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"users", @"pineapple_shop");
            modelBuilder.Entity<User>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<User>().Property<string>(x => x.Login).HasColumnName(@"login").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(16);
            modelBuilder.Entity<User>().Property<string>(x => x.PasswordHash).HasColumnName(@"password_hash").HasColumnType(@"varchar(100)").IsRequired().ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<User>().Property<System.DateTime>(x => x.RegDate).HasColumnName(@"reg_date").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<int?>(x => x.StatusId).HasColumnName(@"status_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<User>().Property<string>(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<User>().HasKey(@"Id");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region UsersStatusesDictionary Mapping

        private void UsersStatusesDictionaryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UsersStatusesDictionary>().ToTable(@"users_statuses_dictionary", @"pineapple_shop");
            modelBuilder.Entity<UsersStatusesDictionary>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UsersStatusesDictionary>().Property<string>(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<UsersStatusesDictionary>().Property<string>(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar(45)").IsRequired().ValueGeneratedNever().HasMaxLength(45);
            modelBuilder.Entity<UsersStatusesDictionary>().HasKey(@"Id");
        }

        partial void CustomizeUsersStatusesDictionaryMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region DeliveryInfo Navigation properties

            modelBuilder.Entity<DeliveryInfo>().HasOne(x => x.Staff).WithMany(op => op.DeliveryInfos).IsRequired(false).HasForeignKey(@"StaffId");
            modelBuilder.Entity<DeliveryInfo>().HasOne(x => x.User).WithMany(op => op.DeliveryInfos).IsRequired(false).HasForeignKey(@"UserId");
            modelBuilder.Entity<DeliveryInfo>().HasMany(x => x.ItemsInDeliveries).WithOne(op => op.DeliveryInfo).IsRequired(true).HasForeignKey(@"DeliveryId");

        #endregion

        #region ItemsInDelivery Navigation properties

            modelBuilder.Entity<ItemsInDelivery>().HasOne(x => x.DeliveryInfo).WithMany(op => op.ItemsInDeliveries).IsRequired(true).HasForeignKey(@"DeliveryId");
            modelBuilder.Entity<ItemsInDelivery>().HasOne(x => x.PineappleMenu).WithMany(op => op.ItemsInDeliveries).IsRequired(true).HasForeignKey(@"PineappleId");

        #endregion

        #region PineappleMenu Navigation properties

            modelBuilder.Entity<PineappleMenu>().HasMany(x => x.ItemsInDeliveries).WithOne(op => op.PineappleMenu).IsRequired(true).HasForeignKey(@"PineappleId");

        #endregion

        #region PositionsDictionary Navigation properties

            modelBuilder.Entity<PositionsDictionary>().HasMany(x => x.Staffs).WithOne(op => op.PositionsDictionary).IsRequired(true).HasForeignKey(@"PositionId");

        #endregion

        #region Staff Navigation properties

            modelBuilder.Entity<Staff>().HasMany(x => x.DeliveryInfos).WithOne(op => op.Staff).IsRequired(false).HasForeignKey(@"StaffId");
            modelBuilder.Entity<Staff>().HasOne(x => x.PositionsDictionary).WithMany(op => op.Staffs).IsRequired(true).HasForeignKey(@"PositionId");

        #endregion

        #region User Navigation properties

            modelBuilder.Entity<User>().HasMany(x => x.DeliveryInfos).WithOne(op => op.User).IsRequired(false).HasForeignKey(@"UserId");
            modelBuilder.Entity<User>().HasOne(x => x.UsersStatusesDictionary).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"StatusId");

        #endregion

        #region UsersStatusesDictionary Navigation properties

            modelBuilder.Entity<UsersStatusesDictionary>().HasMany(x => x.Users).WithOne(op => op.UsersStatusesDictionary).IsRequired(false).HasForeignKey(@"StatusId");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
